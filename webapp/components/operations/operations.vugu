<div>
    <div vg-if="c.WalletFunds() > 0" class="container mt-5">
        <div class="row">
            <div class="col">
                <div class="input-group mb-3">
                    <input 
                        id="FormDate"
                        type="text"
                        class="form-control"
                        :placeholder='time.Now().Format("02/01/2006")'
                    ></input>
                    <span class="input-group-text">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-calendar-date" viewBox="0 0 16 16">
                            <path d="M6.445 11.688V6.354h-.633A12.6 12.6 0 0 0 4.5 7.16v.695c.375-.257.969-.62 1.258-.777h.012v4.61h.675zm1.188-1.305c.047.64.594 1.406 1.703 1.406 1.258 0 2-1.066 2-2.871 0-1.934-.781-2.668-1.953-2.668-.926 0-1.797.672-1.797 1.809 0 1.16.824 1.77 1.676 1.77.746 0 1.23-.376 1.383-.79h.027c-.004 1.316-.461 2.164-1.305 2.164-.664 0-1.008-.45-1.05-.82h-.684zm2.953-2.317c0 .696-.559 1.18-1.184 1.18-.601 0-1.144-.383-1.144-1.2 0-.823.582-1.21 1.168-1.21.633 0 1.16.398 1.16 1.23z"/>
                            <path d="M3.5 0a.5.5 0 0 1 .5.5V1h8V.5a.5.5 0 0 1 1 0V1h1a2 2 0 0 1 2 2v11a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V3a2 2 0 0 1 2-2h1V.5a.5.5 0 0 1 .5-.5zM1 4v10a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V4H1z"/>
                        </svg>
                    </span>
                </div>
            </div>
            <div class="col mb-3">
                <select 
                    id="FormINSI"
                    class="form-control">
                    <option hidden selected>Select Fund</option>
                    <option vg-for="insi, fund := range c.ActiveWallet.GetFunds()" 
                        :value="insi" 
                        vg-content='fund.GetName()'></option>
                </select>
            </div>
            <div class="col mb-3">
                <input 
                    id="FormAmount"
                    type="text"
                    class="form-control"
                    placeholder="Amount (123.4€)"
                ></input>
            </div>
            <div class="col mb-3">
                <input
                    id="FormNav" 
                    type="text"
                    class="form-control"
                    placeholder="NAV (123.4€)"
                ></input>
            </div>
            <div class="col mb-3">
                <input 
                    id="FormShares"
                    type="text"
                    class="form-control"
                    placeholder="Shares (123.4)"
                ></input>
            </div>
            <div class="col">
                <button type="button" 
                    class="btn btn-warning"
                    @click='c.UpdateOp(event, "add")'>Add</button>
            </div>
        </div>
    </div>
    <div>
        <table class="table table-striped table-hover table-sm mt-5">
            <thead class="table-dark">
                <tr>
                    <th scope="col">Date</th>
                    <th scope="col">Fund Name</th>
                    <th scope="col">Fund INSI</th>
                    <th scope="col">Amount</th>
                    <th scope="col">NAV</th>
                    <th scope="col">Shares</th>
                    <th scope="col"></th>
                </tr>
            </thead>
            <tbody vg-if="c.WalletFunds() <= 0">
                <tr>
                    <td colspan="7">
                        <span>TThere are no Funds registered yet.</span>
                    </td>
                </tr>
            </tbody>
            <tbody vg-if="c.WalletFunds() > 0">
                <tr vg-for="_, ops := range c.GetOps()">
                    <td vg-for="idx := 1; idx < len(ops); idx++">
                        <span vg-content='ops[idx]'></span>
                    </td>
                    <td>
                        <button 
                            @click='c.ShowModal(event, "EditOperation", ops[3], ops[0])'
                            class="btn btn-info btn-sm">
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-pencil" viewBox="0 0 16 16">
                                <path d="M12.146.146a.5.5 0 0 1 .708 0l3 3a.5.5 0 0 1 0 .708l-10 10a.5.5 0 0 1-.168.11l-5 2a.5.5 0 0 1-.65-.65l2-5a.5.5 0 0 1 .11-.168l10-10zM11.207 2.5 13.5 4.793 14.793 3.5 12.5 1.207 11.207 2.5zm1.586 3L10.5 3.207 4 9.707V10h.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.5h.293l6.5-6.5zm-9.761 5.175-.106.106-1.528 3.821 3.821-1.528.106-.106A.5.5 0 0 1 5 12.5V12h-.5a.5.5 0 0 1-.5-.5V11h-.5a.5.5 0 0 1-.468-.325z"/>
                            </svg>
                        </button>
                        <button 
                            @click='c.ShowModal(event, "RemoveOperation", ops[3], ops[0])'
                            class="btn btn-danger btn-sm">
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-x" viewBox="0 0 16 16">
                                <path d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708z"/>
                            </svg>
                        </button>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
    <div class="modal fade" id="EditOperation" tabindex="-1" aria-labelledby="EditOperationHeader" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="EditOperationHeader">Edit Operation</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form>
                        <div class="input-group mb-3">
                            <input 
                                id="FormDateModal"
                                type="text"
                                class="form-control"
                                :placeholder='time.Now().Format("02/01/2006")'
                                :value='c.FormDateModal'
                            ></input>
                            <span class="input-group-text">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-calendar-date" viewBox="0 0 16 16">
                                    <path d="M6.445 11.688V6.354h-.633A12.6 12.6 0 0 0 4.5 7.16v.695c.375-.257.969-.62 1.258-.777h.012v4.61h.675zm1.188-1.305c.047.64.594 1.406 1.703 1.406 1.258 0 2-1.066 2-2.871 0-1.934-.781-2.668-1.953-2.668-.926 0-1.797.672-1.797 1.809 0 1.16.824 1.77 1.676 1.77.746 0 1.23-.376 1.383-.79h.027c-.004 1.316-.461 2.164-1.305 2.164-.664 0-1.008-.45-1.05-.82h-.684zm2.953-2.317c0 .696-.559 1.18-1.184 1.18-.601 0-1.144-.383-1.144-1.2 0-.823.582-1.21 1.168-1.21.633 0 1.16.398 1.16 1.23z"/>
                                    <path d="M3.5 0a.5.5 0 0 1 .5.5V1h8V.5a.5.5 0 0 1 1 0V1h1a2 2 0 0 1 2 2v11a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V3a2 2 0 0 1 2-2h1V.5a.5.5 0 0 1 .5-.5zM1 4v10a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V4H1z"/>
                                </svg>
                            </span>
                        </div>
                        <div class="mb-3">
                            <select 
                                id="FormINSIModal"
                                class="form-control">
                                <option hidden selected>Select Fund</option>
                                <option vg-for="insi, fund := range c.ActiveWallet.GetFunds()" 
                                    :value="insi" 
                                    :selected='insi == c.FormINSI' 
                                    vg-content='fund.GetName()'></option>
                            </select>
                        </div>
                        <div class="mb-3">
                            <input 
                                id="FormAmountModal"
                                type="text"
                                class="form-control"
                                placeholder="Amount (123.4€)"
                                :value='c.FormAmountModal'
                            ></input>
                        </div>
                        <div class="mb-3">
                            <input
                                id="FormNavModal" 
                                type="text"
                                class="form-control"
                                placeholder="NAV (123.4€)"
                                :value='c.FormNavModal'
                            ></input>
                        </div>
                        <div class="mb-3">
                            <input 
                                id="FormSharesModal"
                                type="text"
                                class="form-control"
                                placeholder="Shares (123.4)"
                                :value='c.FormSharesModal'
                            ></input>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button @click='c.UpdateOp(event, "edit")'
                        type="button"
                        class="btn btn-primary">Save</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal fade" id="RemoveOperation" tabindex="-1" aria-labelledby="RemoveOperationHeader" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="RemoveOperationHeader">Remove Operation</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>You are about to delete the operation id <b vg-content="c.FormOpID"></b> from the <i vg-content="c.FormFundName"></i> (<span vg-content="c.FormINSI"></span>) Fund.</p>
                    <p>Are you sure?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button @click='c.UpdateOp(event, "remove")'
                        type="button"
                        class="btn btn-danger">Delete</button>
                </div>
            </div>
        </div>
    </div>
</div>

<script type="application/x-go">

import (
    "fmt"
    "time"
    "strconv"
    "strings"

    "github.com/Xumeiquer/wallets/models"
    "github.com/Xumeiquer/wallets/webapp/middleware"
    "github.com/Xumeiquer/wallets/webapp/utils"
)

type Operations struct {
    middleware.APIRef
    middleware.StateRef

    ActiveWallet *models.Wallet `vugu:"data"`

    modalHolder js.Value

    FormDateModal string
    FormINSIModal string
    FormAmountModal string
    FormNavModal string
    FormSharesModal string

    FormFundName string
    FormOpID string
    FormDate time.Time
    FormINSI string
    FormAmount float32
    FormNav float32
    FormShares float32
}

func (op *Operations) Init() {
    fmt.Println("[OPERATIONS] Init")

    v, err := op.State.Get("activeWallet")
    if err == nil {
        wa, ok := v.(*models.Wallet)
        if ok {
            op.ActiveWallet = wa
        }
    }
    
    op.FormDateModal = ""
    op.FormINSIModal = ""
    op.FormAmountModal = ""
    op.FormNavModal = ""
    op.FormSharesModal = ""
}

func (op *Operations) Compute() {
    fmt.Println("[OPERATIONS] Compute")

    v, err := op.State.Get("activeWallet")
    if err == nil {
        wa, ok := v.(*models.Wallet)
        if ok {
            op.ActiveWallet = wa
        }
    }
}

func (op *Operations) WalletFunds() int {
    fmt.Println("[OPERATIONS] WalletFunds")
    return len(op.ActiveWallet.GetFunds())
}

func (op *Operations) GetOps() [][]string {
    fmt.Println("[OPERATIONS] GetOps")

    res := [][]string{}

    for insi, ops := range op.ActiveWallet.GetOperations() {
        for _, o := range ops {
            tmp := []string{}
            tmp = append(tmp, o.GetID())
            tmp = append(tmp, o.GetDate().Format("02/01/2006"))
            tmp = append(tmp, op.ActiveWallet.GetFundNameByInsi(insi))
            tmp = append(tmp, o.GetInsi())
            tmp = append(tmp, fmt.Sprintf("%.3f€", o.GetAmount()))
            tmp = append(tmp, fmt.Sprintf("%.3f€", o.GetNav()))
            tmp = append(tmp, fmt.Sprintf("%.3f", o.GetShares()))

            res = append(res, tmp)
        }
    }

    return res
}

func (op *Operations) ParseFromData() error {
    fmt.Println("[OPERATIONS] ParseFromData")
    
    var err error

    date := strings.TrimSpace(op.FormDateModal)
    op.FormDate, err = time.Parse("02/01/2006", date)
    if err != nil {
        e := fmt.Sprintf("Date time (%s) is not valid. Format: dd/mm/yyyy.", date)
        js.Global().Get("alert").Invoke(e)
        return errors.New(e)
    }

    op.FormINSI = strings.TrimSpace(op.FormINSIModal)
    if len(op.FormINSI) == 0 {
        e := "You have to select a INSI"
        js.Global().Get("alert").Invoke(e)
        return errors.New(e)
    }

    amount := strings.Replace(op.FormAmountModal, "€", "", -1)
    amount = strings.Replace(amount, ",", ".", -1)
    amount = strings.TrimSpace(amount)

    amountF, err := strconv.ParseFloat(amount, 32)
    if err != nil {
        e := fmt.Sprintf("Amount (%s) is not a number", amount)
        js.Global().Get("alert").Invoke(e)
        return errors.New(e)
    }
    op.FormAmount = float32(amountF)

    nav := strings.Replace(op.FormNavModal, "€", "", -1)
    nav = strings.Replace(nav, ",", ".", -1)
    nav = strings.TrimSpace(nav)

    navF, err := strconv.ParseFloat(nav, 32)
    if err != nil {
        e := fmt.Sprintf("NAV (%s) is not a number", nav)
        js.Global().Get("alert").Invoke(e)
        return errors.New(e)
    }
    op.FormNav = float32(navF)

    shares := strings.Replace(op.FormSharesModal, ",", ".", -1)
    shares = strings.Replace(shares, "%", "", -1)
    shares = strings.TrimSpace(shares)
    
    sharesF, err := strconv.ParseFloat(shares, 32)
    if err != nil {
        e := fmt.Sprintf("Shares (%s) is not a number", shares)
        js.Global().Get("alert").Invoke(e)
        return errors.New(e)
    }
    op.FormShares = float32(sharesF)

    op.FormDateModal = ""
    op.FormINSIModal = ""
    op.FormAmountModal = ""
    op.FormNavModal = ""
    op.FormSharesModal = ""

    return nil
}

func (op *Operations) ParseFromDataManual(action string) {
    fmt.Println("[OPERATIONS] ParseFromDataManual")

    document := js.Global().Get("document")

    var ids []string

    if action == "add" {
        ids = []string{"FormDate", "FormINSI", "FormAmount", "FormNav", "FormShares"}
    } else if action == "edit" {
        ids = []string{"FormDateModal", "FormINSIModal", "FormAmountModal", "FormNavModal", "FormSharesModal"}
    }

    for _, id := range ids {
        elem := document.Call("getElementById", id)
        e := elem.Get("value").String()

        switch id {
            case "FormDateModal", "FormDate":
                op.FormDateModal = e
            case "FormINSIModal", "FormINSI":
                op.FormINSIModal = e
            case "FormAmountModal", "FormAmount":
                op.FormAmountModal = e
            case "FormNavModal", "FormNav":
                op.FormNavModal = e
            case "FormSharesModal", "FormShares":
                op.FormSharesModal = e
        }
    }
}

func (op *Operations) UpdateOp(event vugu.DOMEvent, action string) {
    fmt.Println("[OPERATIONS] UpdateOp")

    if action == "add" || action == "edit" {
        op.ParseFromDataManual(action)

        err := op.ParseFromData()
        if err != nil {
            e := fmt.Sprintf("Unable to contunie due to previous errors: %s", err.Error())
            js.Global().Get("alert").Invoke(e)
            return
        }
    }
    
    if action != "add" {
        op.modalHolder.Call("toggle")    
    }

    opNew, err := models.NewOperation(op.FormDate, op.FormINSI, op.FormAmount, op.FormNav, op.FormShares)
    if err != nil {
        js.Global().Get("alert").Invoke("The operation seens to be invalid.\nERROR: " + err.Error())
        return
    }

    ee := event.EventEnv()

    go func(){
        ee.Lock()
        defer ee.UnlockRender()
        
        var err error
        walletCopy := op.ActiveWallet.GetCopy()
        
        if action == "add" {
            err = walletCopy.AddOperation(opNew)
        } else if action == "edit" {
            err = walletCopy.UpdateOperation(op.FormOpID, opNew)
        } else if action == "remove" {
            err = walletCopy.RemoveOperation(op.FormOpID)
        }

        if err != nil {
            js.Global().Get("alert").Invoke(fmt.Sprintf("Unable to %s the operation. ERROR: %s", action, err.Error()))
            return
        } else {
            err = op.API.UpdateWallet(walletCopy)
            if err == nil {
                if action == "add" {
                    op.ActiveWallet.AddOperation(opNew)
                } else if action == "edit" {
                    op.ActiveWallet.UpdateOperation(op.FormOpID, opNew)
                } else if action == "remove" {
                    op.ActiveWallet.RemoveOperation(op.FormOpID)
                }

                op.State.Set("activeWallet", op.ActiveWallet)
            } else {
                js.Global().Get("alert").Invoke("Unable to update the wallet operation. ERROR: " + err.Error())
                return
            }
        }
        
        op.CleanUpSelections()
    }()
}

func (op *Operations) CleanUpSelections() {
    fmt.Println("[OPERATIONS] CleanUpSelections")

    op.FormDateModal = ""
    op.FormINSIModal = ""
    op.FormAmountModal = ""
    op.FormNavModal = ""
    op.FormSharesModal = ""

    op.FormOpID = ""
    op.FormINSI = ""
    op.FormFundName = ""
    op.FormDate = time.Now()
    op.FormAmount = 0
    op.FormNav = 0
    op.FormShares = 0
}

func (op *Operations) ShowModal(event vugu.DOMEvent, action, insi, opID string) {
    fmt.Println("[OPERATIONS] ShowModal")

    modalElem := js.Global().Get("document").Call("getElementById", action)
    bootstrap := js.Global().Get("bootstrap").Get("Modal")

    op.modalHolder = bootstrap.New(modalElem, map[string]interface{}{
        "backdrop": true,
        "keyboard": true,
        "focus": true,
    })

    ee := event.EventEnv()

    go func(){
        ee.Lock()
        defer ee.UnlockRender()

        ops, _  := op.ActiveWallet.GetOperationsFor(insi)
        for _, o := range ops {
            if o.GetID() == opID {
                op.FormOpID = opID
                op.FormINSI = o.GetInsi()
                op.FormFundName = op.ActiveWallet.GetFundNameByInsi(o.GetInsi())
                op.FormDateModal = o.GetDate().Format("02/01/2006")
                op.FormINSIModal = o.GetInsi()
                op.FormAmountModal = fmt.Sprintf("%.3f€", o.GetAmount())
                op.FormNavModal = fmt.Sprintf("%.3f€", o.GetNav())
                op.FormSharesModal = fmt.Sprintf("%.3f", o.GetShares())
                break
            }
        }
        op.modalHolder.Call("toggle")
    }()
}
</script>