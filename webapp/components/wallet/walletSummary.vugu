<div class="container">
    <div class="row mt-5">
        <div class="col-md-6">
            <p style="font-weight: bold;text-transform: uppercase;">Capital</p>
            <table class="table table-striped table-hover table-sm">
                <thead class="table-dark">
                    <tr>
                        <th scope="col">Fund</th>
                        <th scope="col">Shares</th>
                        <th scope="col">Input</th>
                        <th scope="col">Worth</th>
                    </tr>
                </thead>
                <tbody vg-if="len(c.GetOprations())==0">
                    <tr>
                        <td colspan="4">
                            <span>There are no operations yet.</span>
                        </td>
                    </tr>
                </tbody>
                <tbody vg-if="len(c.GetOprations())>0">
                    <tr vg-for="fundName, values := range c.GetCapital()">
                        <th scope="row">
                            <span vg-content="fundName"></span>
                        </th>
                        <td vg-for="_, value := range values">
                            <span vg-content="value"></span>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
        <div class="col-md-6">
            <p style="font-weight: bold;text-transform: uppercase;">Allocation</p>
            <table class="table table-striped table-hover table-sm">
                <thead class="table-dark">
                    <tr>
                        <th scope="col">Fund</th>
                        <th scope="col">Initial</th>
                        <th scope="col">Actual</th>
                    </tr>
                </thead>
                <tbody vg-if="len(c.GetOprations())==0">
                    <tr>
                        <td colspan="3">
                            <span>There are no operations yet.</span>
                        </td>
                    </tr>
                </tbody>
                <tbody vg-if="len(c.GetOprations())>0">
                    <tr vg-for="fundName, values := range c.GetAllocation()">
                        <th scope="row">
                            <span vg-content="fundName"></span>
                        </th>
                        <td vg-for="_, value := range values">
                            <span vg-content="value"></span>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
</div>

<script type="application/x-go">
import (
    "fmt"
    "time"

    "github.com/Xumeiquer/wallets/models"
    "github.com/Xumeiquer/wallets/webapp/middleware"
)

type WalletSummary struct {
    middleware.StateRef
    middleware.LoaderRef

    ActiveWallet *models.Wallet `vugu:"data"`
}

func (w *WalletSummary) Init() {
    fmt.Println("[WALLET-SUMMARY] Init")

    v, err := w.State.Get("activeWallet")
    if err == nil {
        wa, ok := v.(*models.Wallet)
        if ok {
            w.ActiveWallet = wa
            fmt.Printf("[WALLET-SUMMARY] Loading FundsData for: %s\n", w.ActiveWallet.GetName())
            fmt.Printf("Loader: %v\n", w.Loader)
            err = w.Loader.UpdateFundsData(w.ActiveWallet)
            if err != nil {
                js.Global().Get("alert").Invoke("Unbale to load funds data")
            }
        } else {
            js.Global().Get("alert").Invoke("Unbale to load the selected wallet")
        }
    } else {
        js.Global().Get("alert").Invoke("Unbale to load the selected wallet")
    }
}

func (w *WalletSummary) Compute() {
    fmt.Println("[WALLET-SUMMARY] Compute")

    v, err := w.State.Get("activeWallet")
    if err == nil {
        wa, ok := v.(*models.Wallet)
        if ok {
            w.ActiveWallet = wa
            err = w.Loader.UpdateFundsData(w.ActiveWallet)
            if err != nil {
                js.Global().Get("alert").Invoke("Unbale to load funds data")
            }
        }
    }
}

func (w *WalletSummary) GetOprations() models.Operations {
    fmt.Println("[WALLET-SUMMARY] GetOprations")

    return w.ActiveWallet.GetOperations()
}

func (w *WalletSummary) GetCapital() map[string][]string {
    fmt.Println("[WALLET-SUMMARY] GetCapital")

    res := map[string][]string{}
    var sign string
    for insi, capital := range w.ActiveWallet.Capitalization() {
        fundName := w.ActiveWallet.GetFundNameByInsi(insi)
        res[fundName] = []string{}
        for idx, value := range capital {
            if idx == 0 {
                sign = ""
            } else {
                sign = "â‚¬"
            }
            res[fundName] = append(res[fundName], fmt.Sprintf("%.3f%s", value, sign))
        }
    }
    return res
}

func (w *WalletSummary) GetAllocation() map[string][]string {
    fmt.Println("[WALLET-SUMMARY] GetAllocation")

    res := map[string][]string{}
    for insi, allocation := range w.ActiveWallet.Allocations() {
        fundName := w.ActiveWallet.GetFundNameByInsi(insi)
        res[fundName] = []string{}
        for _, value := range allocation {
            res[fundName] = append(res[fundName], fmt.Sprintf("%.3f%%", value))
        }
    }
    return res
}

</script>