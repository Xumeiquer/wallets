<div class="container">
    <div class="row justify-content-end mb-3">
        <div class="col-sm-2">
            <button 
                type="button"
                class="btn btn-warning"
                @click='c.ShowModal(event, "add", "")'>Add Fund</button>
        </div>
    </div>
    <div class="row">
        <div class="col">
            <table class="table table-striped table-hover table-sm">
                <thead class="table-dark">
                    <tr>
                        <th scope="col">Name</th>
                        <th scope="col">INSI</th>
                        <th scope="col">NAV</th>
                        <th scope="col">Date</th>
                        <th scope="col"></th>
                    </tr>
                </thead>
                <tbody vg-if="len(c.GetFundsData()) <= 0">
                    <tr>
                        <td colspan="5">There are no Funds registered yet.</td>
                    </tr>
                </tbody>
                <tbody vg-if="len(c.GetFundsData()) > 0">
                    <tr vg-for="fundInsi, values := range c.GetFundsData()">
                        <th scope="row">
                            <span vg-content="values[0]"></span>
                        </th>
                        <td>
                            <span vg-content="fundInsi"></span>
                        </td>
                        <td vg-for="idx := 1; idx < len(values); idx++">
                            <span vg-content="values[idx]"></span>
                        </td>
                        <td>
                            <button @click='c.ShowModal(event, "edit", fundInsi)'
                                class="btn btn-info">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-pencil" viewBox="0 0 16 16">
                                    <path d="M12.146.146a.5.5 0 0 1 .708 0l3 3a.5.5 0 0 1 0 .708l-10 10a.5.5 0 0 1-.168.11l-5 2a.5.5 0 0 1-.65-.65l2-5a.5.5 0 0 1 .11-.168l10-10zM11.207 2.5 13.5 4.793 14.793 3.5 12.5 1.207 11.207 2.5zm1.586 3L10.5 3.207 4 9.707V10h.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.5h.293l6.5-6.5zm-9.761 5.175-.106.106-1.528 3.821 3.821-1.528.106-.106A.5.5 0 0 1 5 12.5V12h-.5a.5.5 0 0 1-.5-.5V11h-.5a.5.5 0 0 1-.468-.325z"/>
                                </svg>
                            </button>
                            <button @click='c.ShowModal(event, "delete", fundInsi)'
                                class="btn btn-danger">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-x" viewBox="0 0 16 16">
                                    <path d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708z"/>
                                </svg>
                            </button>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
    <div class="modal fade" id="AddFund" tabindex="-1" aria-labelledby="AddFund" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="AddFund">Add Fund</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form>
                        <div class="mb-3">
                            <label for="wallet-name" class="col-form-label">Fund INSI:</label>
                            <input type="text" class="form-control" id="AddFundINSIModal" placeholder="IE00B03HCZ61">
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="button"
                        class="btn btn-primary"
                        @click='c.HandleModal(event, "add")'>Add</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal fade" id="EditFund" tabindex="-1" aria-labelledby="EditFund" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="EditFund">Modify Fund</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form>
                        <div class="mb-3">
                            <label for="wallet-name" class="col-form-label">Fund INSI:</label>
                            <input type="text" class="form-control" id="EditFundINSIModal" :value="c.GetFundINSI()">
                        </div>
                    </form>
                    <small class="text-warning">This will update all the operation related to the actual Fund.</small>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="button"
                        class="btn btn-primary"
                        @click='c.HandleModal(event, "edit")'>Modify</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal fade" id="DeleteFund" tabindex="-1" aria-labelledby="DeleteFund" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="DeleteFund">Delete fund</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>You are about to delete
                        <span  vg-content="c.GetFundINSI()"
                            style="font-weight: bold;"></span></p>
                    <p>Do you want to proceed?</p>
                    <small class="text-warning">This will remove all the operation related to the actual Fund.</small>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="button"
                        class="btn btn-primary"
                        @click='c.HandleModal(event, "delete")'>Confirm</button>
                </div>
            </div>
        </div>
    </div>
</div>

<script type="application/x-go">
import (
    "fmt"
    "time"

    "github.com/Xumeiquer/wallets/models"
    "github.com/Xumeiquer/wallets/webapp/middleware"
)

type WalletFunds struct {
    middleware.APIRef
    middleware.StateRef
    middleware.LoaderRef

    ActiveWallet *models.Wallet `vugu:"data"`

    modalHolder js.Value
    modalTarget string
}

func (w *WalletFunds) Init() {
    fmt.Println("[WALLET-FUNDS] Init")

    v, err := w.State.Get("activeWallet")
    if err == nil {
        wa, ok := v.(*models.Wallet)
        if ok {
            w.ActiveWallet = wa
            err = w.Loader.UpdateFundsData(w.ActiveWallet)
            if err != nil {
                js.Global().Get("alert").Invoke("Unbale to load funds data")
            }
        } else {
            js.Global().Get("alert").Invoke("Unbale to load the selected wallet")
        }
    }
}

func (w *WalletFunds) Compute() {
    fmt.Println("[WALLET-FUNDS] Compute")

    v, err := w.State.Get("activeWallet")
    if err == nil {
        wa, ok := v.(*models.Wallet)
        if ok {
            w.ActiveWallet = wa
            err = w.Loader.UpdateFundsData(w.ActiveWallet)
            if err != nil {
                js.Global().Get("alert").Invoke("Unbale to load funds data")
            }
        } else {
            js.Global().Get("alert").Invoke("Unbale to load the selected wallet")
        }
    }
}

func (w *WalletFunds) GetFundINSI() string {
    fmt.Println("[WALLET-FUNDS] GetFundINSI")

    return w.ActiveWallet.GetFundInsiByName(w.modalTarget)
}

func (w *WalletFunds) GetFundsData() map[string][]string {
    fmt.Println("[WALLET-FUNDS] GetFundsData")

    res := map[string][]string{}

    for insi, fund := range w.ActiveWallet.GetFunds() {
        res[insi] = []string{fund.GetName()}
        res[insi] = append(res[insi], fmt.Sprintf("%.3fâ‚¬", fund.GetNav()))
        res[insi] = append(res[insi], fund.GetDate().Format("02/01/2006"))
    }
    return res
}

func (w *WalletFunds) ShowModal(event vugu.DOMEvent, action, fundInsi string) {
    fmt.Println("[WALLET-FUNDS] ShowModal")
    var modalElem js.Value

    if action == "add" {
        modalElem = js.Global().Get("document").Call("getElementById", "AddFund")
    } else if action == "edit" {
        modalElem = js.Global().Get("document").Call("getElementById", "EditFund")
    } else if action == "delete" {
        modalElem = js.Global().Get("document").Call("getElementById", "DeleteFund")
    }

    bootstrap := js.Global().Get("bootstrap").Get("Modal")

    w.modalHolder = bootstrap.New(modalElem, map[string]interface{}{
        "backdrop": true,
        "keyboard": true,
        "focus": true,
    })

    w.modalHolder.Call("toggle")
    w.modalTarget = fundInsi
}

func (w *WalletFunds) HandleModal(event vugu.DOMEvent, action string) {
    fmt.Printf("[WALLET-FUNDS] HandleModal :: %s -> %s\n", action, w.modalTarget)

    var (
        input js.Value
        actionValue string
        fund models.FundData
        err error
    )

    w.modalHolder.Call("toggle")

    if action == "add" {
        input = js.Global().Get("document").Call("getElementById", "AddFundINSIModal")
        actionValue = input.Get("value").String()
        if actionValue == "" {
            js.Global().Get("alert").Invoke("Fund INSI can not be empty.")
            return
        }
    } else if action == "edit" {
        input = js.Global().Get("document").Call("getElementById", "EditFundINSIModal")
        actionValue = input.Get("value").String()
        if actionValue == "" {
            js.Global().Get("alert").Invoke("Fund INSI can not be empty.")
            return
        }
    }

    ee := event.EventEnv()

    go func() {
        ee.Lock()
        defer ee.UnlockRender()

        walletCopy := w.ActiveWallet.GetCopy()

        if action == "edit" && w.modalTarget == actionValue {
            js.Global().Get("alert").Invoke("Old and new Fund INSI are the same.")
            return
        }

        if action == "delete" {
            walletCopy.RemoveFundByInsi(w.modalTarget)
        }

        if action == "add" || action == "edit" {
            fund, err = w.API.GetFund(actionValue)
        }

        if err == nil {
            if action == "add"  {
                walletCopy.AddFund(fund)
            }

            if action == "edit" {
                walletCopy.UpdateFundDataAndOps(w.modalTarget, fund)
            }

            err = w.API.UpdateWallet(walletCopy)
            
            if err == nil {
                if action == "delete" {
                    w.ActiveWallet.RemoveFundByInsi(w.modalTarget)
                    w.State.Unset(w.modalTarget)
                }

                if action == "add" || action == "edit" {
                    if action == "add" {
                        w.ActiveWallet.AddFund(fund)
                    }
                    if action == "edit" {
                        w.ActiveWallet.UpdateFundDataAndOps(w.modalTarget, fund)
                    }

                    w.State.Set(fund.GetINSI(), fund)
                    w.State.Set("activeWallet", w.ActiveWallet)
                }
            } 
        } else {
            js.Global().Get("alert").Invoke(err.Error())
            return
        }
    }()
}
</script>